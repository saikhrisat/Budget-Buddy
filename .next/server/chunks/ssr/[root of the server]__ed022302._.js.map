{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/db.ts"],"sourcesContent":["// src/lib/db.ts\nimport sqlite3 from 'sqlite3';\nimport { open, type Database } from 'sqlite';\nimport path from 'path';\n\n// Define a global variable to cache the database connection\n// This is to avoid reconnecting on every hot reload in development\ndeclare global {\n  // eslint-disable-next-line no-var\n  var dbInstance: Database<sqlite3.Database, sqlite3.Statement> | undefined;\n}\n\nconst DB_FILE_NAME = 'budgetbuddy.db';\n\nlet db: Database<sqlite3.Database, sqlite3.Statement>;\n\nexport async function getDbConnection() {\n  if (process.env.NODE_ENV === 'development') {\n    if (!global.dbInstance) {\n      global.dbInstance = await open({\n        filename: path.join(process.cwd(), DB_FILE_NAME),\n        driver: sqlite3.Database,\n      });\n      console.log('New DB connection established (development).');\n    }\n    db = global.dbInstance;\n  } else {\n    // Production environment\n    if (!db) {\n      db = await open({\n        filename: path.join(process.cwd(), DB_FILE_NAME), // Adjust path as needed for production deployment\n        driver: sqlite3.Database,\n      });\n      console.log('New DB connection established (production).');\n    }\n  }\n  return db;\n}\n\n// Optional: Function to close the database connection if needed (e.g., during app shutdown)\nexport async function closeDbConnection() {\n  if (process.env.NODE_ENV === 'development') {\n    if (global.dbInstance) {\n      await global.dbInstance.close();\n      global.dbInstance = undefined;\n      console.log('DB connection closed (development).');\n    }\n  } else {\n    if (db) {\n      await db.close();\n      // db = undefined; // Not strictly necessary if app is shutting down\n      console.log('DB connection closed (production).');\n    }\n  }\n}\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AACA;AAAA;AACA;;;;AASA,MAAM,eAAe;AAErB,IAAI;AAEG,eAAe;IACpB,wCAA4C;QAC1C,IAAI,CAAC,OAAO,UAAU,EAAE;YACtB,OAAO,UAAU,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,OAAI,AAAD,EAAE;gBAC7B,UAAU,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;gBACnC,QAAQ,uGAAA,CAAA,UAAO,CAAC,QAAQ;YAC1B;YACA,QAAQ,GAAG,CAAC;QACd;QACA,KAAK,OAAO,UAAU;IACxB,OAAO;;IASP;IACA,OAAO;AACT;AAGO,eAAe;IACpB,wCAA4C;QAC1C,IAAI,OAAO,UAAU,EAAE;YACrB,MAAM,OAAO,UAAU,CAAC,KAAK;YAC7B,OAAO,UAAU,GAAG;YACpB,QAAQ,GAAG,CAAC;QACd;IACF,OAAO;;IAMP;AACF","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/services/transactionService.ts"],"sourcesContent":["// src/app/services/transactionService.ts\n'use server';\n\nimport { getDbConnection } from '@/lib/db';\nimport type { IncomeCategory } from '@/contexts/AppContext'; // Assuming this might be used for category validation if strict\nimport { z } from 'zod';\n\n// Define the structure of a transaction for database interaction\nexport interface DBTransaction {\n  id: string;\n  userId: string; // For future multi-user support, default for now\n  type: 'income' | 'expense';\n  date: string; // ISO 8601 string\n  amount: number; // Always positive\n  description: string; // Source name for income, expense name for expense\n  category: string; // Income category or expense category (using the detailed expense categories)\n  notes?: string | null; // Optional\n  createdAt: string; // ISO 8601 string\n}\n\n// Schema for validating new transaction data (excluding server-generated fields like id, userId, createdAt)\nconst NewTransactionSchema = z.object({\n  type: z.enum(['income', 'expense']),\n  date: z.string().datetime(), // Validates ISO 8601 date-time string\n  amount: z.number().positive(),\n  description: z.string().min(1),\n  category: z.string().min(1),\n  notes: z.string().optional().nullable(),\n});\ntype NewTransactionPayload = z.infer<typeof NewTransactionSchema>;\n\n\nexport async function addTransactionDb(transactionData: NewTransactionPayload): Promise<DBTransaction> {\n  const validatedData = NewTransactionSchema.parse(transactionData); // Validate input\n  const db = await getDbConnection();\n\n  const newId = crypto.randomUUID();\n  const userId = 'default_user'; // Placeholder for single-user mode\n  const createdAt = new Date().toISOString();\n\n  const newDbTransaction: DBTransaction = {\n    id: newId,\n    userId,\n    ...validatedData,\n    notes: validatedData.notes ?? null, // Ensure null if undefined\n    createdAt,\n  };\n\n  await db.run(\n    `INSERT INTO transactions (id, userId, type, date, amount, description, category, notes, createdAt)\n     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n    newDbTransaction.id,\n    newDbTransaction.userId,\n    newDbTransaction.type,\n    newDbTransaction.date,\n    newDbTransaction.amount,\n    newDbTransaction.description,\n    newDbTransaction.category,\n    newDbTransaction.notes,\n    newDbTransaction.createdAt\n  );\n\n  return newDbTransaction;\n}\n\nexport async function getAllTransactionsDb(): Promise<DBTransaction[]> {\n  const db = await getDbConnection();\n  const transactions = await db.all<DBTransaction[]>(\n    'SELECT * FROM transactions ORDER BY date DESC, createdAt DESC' // Order by transaction date, then by creation time\n  );\n  return transactions;\n}\n\nexport async function deleteTransactionDb(id: string): Promise<{ success: boolean }> {\n  const db = await getDbConnection();\n  const result = await db.run('DELETE FROM transactions WHERE id = ? AND userId = ?', id, 'default_user');\n  \n  if (result.changes === 0) {\n    // Optional: throw error or return more specific info if delete failed (e.g. ID not found)\n    console.warn(`Attempted to delete transaction with id ${id}, but no rows were affected.`);\n    return { success: false };\n  }\n  return { success: true };\n}\n\n// Example of a more specific query if needed later\nexport async function getIncomeTransactionsDb(): Promise<DBTransaction[]> {\n  const db = await getDbConnection();\n  return db.all<DBTransaction[]>(\"SELECT * FROM transactions WHERE type = 'income' AND userId = ? ORDER BY date DESC\", 'default_user');\n}\n\nexport async function getExpenseTransactionsDb(): Promise<DBTransaction[]> {\n  const db = await getDbConnection();\n  return db.all<DBTransaction[]>(\"SELECT * FROM transactions WHERE type = 'expense' AND userId = ? ORDER BY date DESC\", 'default_user');\n}\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;;;;;;;AAGzC;AAEA;;;;;;AAeA,4GAA4G;AAC5G,MAAM,uBAAuB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,MAAM,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAU;IAClC,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACzB,QAAQ,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,aAAa,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAC5B,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IACzB,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ;AACvC;AAIO,eAAe,uCAAc,GAAd,iBAAiB,eAAsC;IAC3E,MAAM,gBAAgB,qBAAqB,KAAK,CAAC,kBAAkB,iBAAiB;IACpF,MAAM,KAAK,MAAM,CAAA,GAAA,gHAAA,CAAA,kBAAe,AAAD;IAE/B,MAAM,QAAQ,OAAO,UAAU;IAC/B,MAAM,SAAS,gBAAgB,mCAAmC;IAClE,MAAM,YAAY,IAAI,OAAO,WAAW;IAExC,MAAM,mBAAkC;QACtC,IAAI;QACJ;QACA,GAAG,aAAa;QAChB,OAAO,cAAc,KAAK,IAAI;QAC9B;IACF;IAEA,MAAM,GAAG,GAAG,CACV,CAAC;uCACkC,CAAC,EACpC,iBAAiB,EAAE,EACnB,iBAAiB,MAAM,EACvB,iBAAiB,IAAI,EACrB,iBAAiB,IAAI,EACrB,iBAAiB,MAAM,EACvB,iBAAiB,WAAW,EAC5B,iBAAiB,QAAQ,EACzB,iBAAiB,KAAK,EACtB,iBAAiB,SAAS;IAG5B,OAAO;AACT;AAEO,eAAe,uCAAkB,GAAlB;IACpB,MAAM,KAAK,MAAM,CAAA,GAAA,gHAAA,CAAA,kBAAe,AAAD;IAC/B,MAAM,eAAe,MAAM,GAAG,GAAG,CAC/B,gEAAgE,mDAAmD;;IAErH,OAAO;AACT;AAEO,eAAe,uCAAiB,GAAjB,oBAAoB,EAAU;IAClD,MAAM,KAAK,MAAM,CAAA,GAAA,gHAAA,CAAA,kBAAe,AAAD;IAC/B,MAAM,SAAS,MAAM,GAAG,GAAG,CAAC,wDAAwD,IAAI;IAExF,IAAI,OAAO,OAAO,KAAK,GAAG;QACxB,0FAA0F;QAC1F,QAAQ,IAAI,CAAC,CAAC,wCAAwC,EAAE,GAAG,4BAA4B,CAAC;QACxF,OAAO;YAAE,SAAS;QAAM;IAC1B;IACA,OAAO;QAAE,SAAS;IAAK;AACzB;AAGO,eAAe,uCAAqB,GAArB;IACpB,MAAM,KAAK,MAAM,CAAA,GAAA,gHAAA,CAAA,kBAAe,AAAD;IAC/B,OAAO,GAAG,GAAG,CAAkB,sFAAsF;AACvH;AAEO,eAAe,uCAAsB,GAAtB;IACpB,MAAM,KAAK,MAAM,CAAA,GAAA,gHAAA,CAAA,kBAAe,AAAD;IAC/B,OAAO,GAAG,GAAG,CAAkB,uFAAuF;AACxH;;;IA9DsB;IAiCA;IAQA;IAaA;IAKA;;AA3DA,+OAAA;AAiCA,+OAAA;AAQA,+OAAA;AAaA,+OAAA;AAKA,+OAAA","debugId":null}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}