{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/services/transactionService.ts"],"sourcesContent":["// src/app/services/transactionService.ts\n'use server';\n\nimport { getDbConnection } from '@/lib/db';\nimport type { IncomeCategory } from '@/contexts/AppContext'; // Assuming this might be used for category validation if strict\nimport { z } from 'zod';\n\n// Define the structure of a transaction for database interaction\nexport interface DBTransaction {\n  id: string;\n  userId: string; // For future multi-user support, default for now\n  type: 'income' | 'expense';\n  date: string; // ISO 8601 string\n  amount: number; // Always positive\n  description: string; // Source name for income, expense name for expense\n  category: string; // Income category or expense category (using the detailed expense categories)\n  notes?: string | null; // Optional\n  createdAt: string; // ISO 8601 string\n}\n\n// Schema for validating new transaction data (excluding server-generated fields like id, userId, createdAt)\nconst NewTransactionSchema = z.object({\n  type: z.enum(['income', 'expense']),\n  date: z.string().datetime(), // Validates ISO 8601 date-time string\n  amount: z.number().positive(),\n  description: z.string().min(1),\n  category: z.string().min(1),\n  notes: z.string().optional().nullable(),\n});\ntype NewTransactionPayload = z.infer<typeof NewTransactionSchema>;\n\n\nexport async function addTransactionDb(transactionData: NewTransactionPayload): Promise<DBTransaction> {\n  const validatedData = NewTransactionSchema.parse(transactionData); // Validate input\n  const db = await getDbConnection();\n\n  const newId = crypto.randomUUID();\n  const userId = 'default_user'; // Placeholder for single-user mode\n  const createdAt = new Date().toISOString();\n\n  const newDbTransaction: DBTransaction = {\n    id: newId,\n    userId,\n    ...validatedData,\n    notes: validatedData.notes ?? null, // Ensure null if undefined\n    createdAt,\n  };\n\n  await db.run(\n    `INSERT INTO transactions (id, userId, type, date, amount, description, category, notes, createdAt)\n     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`,\n    newDbTransaction.id,\n    newDbTransaction.userId,\n    newDbTransaction.type,\n    newDbTransaction.date,\n    newDbTransaction.amount,\n    newDbTransaction.description,\n    newDbTransaction.category,\n    newDbTransaction.notes,\n    newDbTransaction.createdAt\n  );\n\n  return newDbTransaction;\n}\n\nexport async function getAllTransactionsDb(): Promise<DBTransaction[]> {\n  const db = await getDbConnection();\n  const transactions = await db.all<DBTransaction[]>(\n    'SELECT * FROM transactions ORDER BY date DESC, createdAt DESC' // Order by transaction date, then by creation time\n  );\n  return transactions;\n}\n\nexport async function deleteTransactionDb(id: string): Promise<{ success: boolean }> {\n  const db = await getDbConnection();\n  const result = await db.run('DELETE FROM transactions WHERE id = ? AND userId = ?', id, 'default_user');\n  \n  if (result.changes === 0) {\n    // Optional: throw error or return more specific info if delete failed (e.g. ID not found)\n    console.warn(`Attempted to delete transaction with id ${id}, but no rows were affected.`);\n    return { success: false };\n  }\n  return { success: true };\n}\n\n// Example of a more specific query if needed later\nexport async function getIncomeTransactionsDb(): Promise<DBTransaction[]> {\n  const db = await getDbConnection();\n  return db.all<DBTransaction[]>(\"SELECT * FROM transactions WHERE type = 'income' AND userId = ? ORDER BY date DESC\", 'default_user');\n}\n\nexport async function getExpenseTransactionsDb(): Promise<DBTransaction[]> {\n  const db = await getDbConnection();\n  return db.all<DBTransaction[]>(\"SELECT * FROM transactions WHERE type = 'expense' AND userId = ? ORDER BY date DESC\", 'default_user');\n}\n"],"names":[],"mappings":"AAAA,yCAAyC;;;;;;;;;;IAgCnB;IAiCA;IAQA;IAaA;IAKA","debugId":null}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/hooks/use-toast.ts"],"sourcesContent":["\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/contexts/AppContext.tsx"],"sourcesContent":["\n\"use client\";\n\nimport type { Dispatch, ReactNode, SetStateAction } from \"react\";\nimport React, { createContext, useContext, useState, useMemo, useEffect, useCallback } from 'react';\nimport { addTransactionDb, getAllTransactionsDb, deleteTransactionDb, type DBTransaction } from '@/app/services/transactionService';\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Define Income Categories\nexport type IncomeCategory = \n  | \"Earned Income\" \n  | \"Business Income\" \n  | \"Investment Income\" \n  | \"Government Support\" \n  | \"Borrowed Money\" \n  | \"Gifted or Windfall Money\" \n  | \"Sales / Resale Income\";\n\nexport const incomeCategories: IncomeCategory[] = [\n  \"Earned Income\", \n  \"Business Income\", \n  \"Investment Income\", \n  \"Government Support\", \n  \"Borrowed Money\", \n  \"Gifted or Windfall Money\", \n  \"Sales / Resale Income\"\n];\n\n// This type is now for client-side representation if needed, DBTransaction is source of truth\nexport type Expense = {\n  id: string; // From DBTransaction.id\n  name: string; // From DBTransaction.description\n  amount: number; // From DBTransaction.amount\n  date: string; // From DBTransaction.date (ISO string)\n  type: 'essential' | 'variable'; // This info isn't in DB, needs to be derived or simplified.\n                                   // For now, all DB 'expense' type will be considered for general expense lists.\n                                   // The specific 'essential'/'variable' breakdown logic might need revisiting if this distinction\n                                   // is critical and not inferable from DB's 'category'.\n                                   // Let's assume for now that the 'category' in DB implies this.\n  category: string; // From DBTransaction.category (detailed category)\n  notes?: string | null; // From DBTransaction.notes\n};\n\nexport interface ExpenseCategoryGroup {\n  name: string; \n  options: string[]; \n}\n\ninterface AppContextType {\n  allTransactions: DBTransaction[];\n  expenses: Expense[]; // Derived list of Expense objects for components\n  fetchTransactions: () => Promise<void>; \n  addIncomeEntry: (newEntryData: { date: Date; sourceName: string; amount: number; note?: string; category: IncomeCategory }) => Promise<void>;\n  addExpenseToList: (expenseData: { name: string; amount: number; date: Date | string; type: 'essential' | 'variable'; category: string; notes?: string }) => Promise<void>;\n  deleteExpenseById: (id: string) => Promise<void>; \n  totalIncome: number;\n  totalExpenses: number;\n  availableBalance: number;\n  userName: string;\n  setUserName: Dispatch<SetStateAction<string>>;\n  fixedCategoryGroups: ExpenseCategoryGroup[];\n  variableCategoryGroups: ExpenseCategoryGroup[];\n  allCategoryOptions: string[];\n  isLoading: boolean;\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\n// Existing category definitions\nconst housingOptions = ['Rent / Mortgage', 'Property Taxes', 'Homeowners/Renters Insurance', 'HOA Fees', 'Home Maintenance / Repairs', 'Other Housing'];\nconst utilitiesOptions = ['Electricity / Gas', 'Water / Sewer', 'Internet / Cable TV', 'Mobile Phone', 'Trash / Recycling', 'Other Utilities'];\nconst transportationOptions = ['Car Payment', 'Car Insurance', 'Fuel (Gas/Petrol)', 'Public Transportation (Bus, Train, Metro)', 'Ride Sharing (Uber, Lyft, Ola, etc.)', 'Vehicle Maintenance / Repairs', 'Parking Fees / Tolls', 'Other Transportation'];\nconst debtPaymentsOptions = ['Credit Card Payments', 'Student Loans', 'Personal Loans', 'Other Loan Payments'];\nconst foodOptions = ['Groceries', 'Dining Out / Restaurants', 'Coffee Shops', 'Takeaway / Delivery', 'Other Food'];\nconst personalCareOptions = ['Haircuts / Salon', 'Toiletries / Personal Hygiene Products', 'Gym / Fitness', 'Clothing / Shoes', 'Dry Cleaning / Laundry', 'Other Personal Care'];\nconst entertainmentOptions = ['Streaming Services (Netflix, Spotify, etc.)', 'Movies / Cinema', 'Concerts / Events', 'Hobbies', 'Books / Music', 'Video Games', 'Other Entertainment'];\nconst shoppingOptions = ['General Shopping', 'Electronics', 'Home Goods', 'Gifts', 'Other Shopping'];\n\nconst defaultFixedCategoryGroups: ExpenseCategoryGroup[] = [\n  { name: \"Housing\", options: housingOptions },\n  { name: \"Utilities\", options: utilitiesOptions },\n  { name: \"Transportation\", options: transportationOptions },\n  { name: \"Debt Payments\", options: debtPaymentsOptions },\n];\n\nconst defaultVariableCategoryGroups: ExpenseCategoryGroup[] = [\n  { name: \"Food\", options: foodOptions },\n  { name: \"Personal Care\", options: personalCareOptions },\n  { name: \"Entertainment\", options: entertainmentOptions },\n  { name: \"Shopping\", options: shoppingOptions },\n];\n\nconst allOptions = [...defaultFixedCategoryGroups, ...defaultVariableCategoryGroups]\n                    .flatMap(group => group.options);\n\nexport const AppProvider = ({ children }: { children: ReactNode }) => {\n  const [allTransactions, setAllTransactions] = useState<DBTransaction[]>([]);\n  const [userName, setUserName] = useState<string>('Guest');\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const { toast } = useToast();\n\n  const fetchTransactions = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const transactions = await getAllTransactionsDb();\n      setAllTransactions(transactions);\n    } catch (error) {\n      console.error(\"Failed to fetch transactions:\", error);\n      toast({ title: \"Error\", description: \"Could not load transaction data.\", variant: \"destructive\" });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [toast]);\n\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n\n  const addIncomeEntry = async (newEntryData: { date: Date; sourceName: string; amount: number; note?: string; category: IncomeCategory }) => {\n    try {\n      const payload = {\n        type: 'income' as 'income',\n        date: newEntryData.date.toISOString(),\n        amount: newEntryData.amount,\n        description: newEntryData.sourceName,\n        category: newEntryData.category, // This is the income category e.g. \"Earned Income\"\n        notes: newEntryData.note || null,\n      };\n      await addTransactionDb(payload);\n      await fetchTransactions(); \n    } catch (error) {\n      console.error(\"Failed to add income entry:\", error);\n      toast({ title: \"Error Adding Income\", description: \"Could not save income details. \" + (error instanceof Error ? error.message : \"\"), variant: \"destructive\" });\n      throw error; \n    }\n  };\n  \n  const addExpenseToList = async (expenseData: { name: string; amount: number; date: Date | string; type: 'essential' | 'variable'; category: string; notes?: string }) => {\n    let definitiveDateString: string;\n    \n    if (typeof expenseData.date === 'string') {\n      const parsedDate = new Date(expenseData.date);\n      if (!isNaN(parsedDate.getTime())) {\n        definitiveDateString = parsedDate.toISOString();\n      } else {\n        console.warn(`Invalid date string received in addExpenseToList: \"${expenseData.date}\". Defaulting to current date.`);\n        definitiveDateString = new Date().toISOString(); \n      }\n    } else if (expenseData.date instanceof Date && !isNaN(expenseData.date.getTime())) {\n      definitiveDateString = expenseData.date.toISOString();\n    } else {\n      console.warn(`Invalid date object received in addExpenseToList. Defaulting to current date.`);\n      definitiveDateString = new Date().toISOString();\n    }\n\n    try {\n      const payload = {\n        type: 'expense' as 'expense',\n        date: definitiveDateString,\n        amount: expenseData.amount,\n        description: expenseData.name,\n        category: expenseData.category, // This is the detailed expense category e.g. \"Monthly Rent\"\n        notes: expenseData.notes || null,\n      };\n      await addTransactionDb(payload);\n      await fetchTransactions(); \n    } catch (error) {\n      console.error(\"Failed to add expense:\", error);\n      toast({ title: \"Error Adding Expense\", description: \"Could not save expense details. \" + (error instanceof Error ? error.message : \"\"), variant: \"destructive\" });\n      throw error;\n    }\n  };\n\n  const deleteExpenseById = async (id: string) => { \n    try {\n      await deleteTransactionDb(id);\n      await fetchTransactions(); \n      toast({ title: \"Transaction Deleted\", description: \"The transaction has been removed.\" });\n    } catch (error) {\n      console.error(\"Failed to delete transaction:\", error);\n      toast({ title: \"Error Deleting Transaction\", description: \"Could not remove the transaction.\", variant: \"destructive\" });\n    }\n  };\n\n  const totalIncome = useMemo(() => {\n    return allTransactions\n      .filter(t => t.type === 'income')\n      .reduce((sum, entry) => sum + entry.amount, 0);\n  }, [allTransactions]);\n\n  const totalExpenses = useMemo(() => {\n    return allTransactions\n      .filter(t => t.type === 'expense')\n      .reduce((sum, exp) => sum + exp.amount, 0);\n  }, [allTransactions]);\n\n  const availableBalance = useMemo(() => totalIncome - totalExpenses, [totalIncome, totalExpenses]);\n\n  // This will be used by components like ExpenseList to show only expenses\n  const expensesList: Expense[] = useMemo(() => {\n    return allTransactions\n      .filter(t => t.type === 'expense')\n      .map(t => {\n        let expenseListType: 'essential' | 'variable' = 'variable'; \n        if (defaultFixedCategoryGroups.some(group => group.options.includes(t.category))) {\n            expenseListType = 'essential';\n        }\n        \n        return {\n          id: t.id,\n          name: t.description,\n          amount: t.amount,\n          date: t.date,\n          type: expenseListType, \n          category: t.category, // detailed category\n          notes: t.notes,\n        };\n      });\n  }, [allTransactions]);\n\n  // Expose income entries derived from allTransactions for components that might specifically need them.\n  const incomeEntriesList = useMemo(() => {\n      return allTransactions.filter(t => t.type === 'income');\n  }, [allTransactions]);\n\n\n  return (\n    <AppContext.Provider value={{\n      allTransactions,\n      expenses: expensesList, \n      fetchTransactions,\n      addIncomeEntry,\n      addExpenseToList,\n      deleteExpenseById,\n      totalIncome,\n      totalExpenses,\n      availableBalance,\n      userName,\n      setUserName,\n      fixedCategoryGroups: defaultFixedCategoryGroups,\n      variableCategoryGroups: defaultVariableCategoryGroups,\n      allCategoryOptions: allOptions,\n      isLoading,\n      // incomeEntries: incomeEntriesList, // Provide if a component specifically needs only income entries.\n                                         // For most cases, 'totalIncome' and 'allTransactions' should suffice.\n    }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useAppContext = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n\n// Removed previous Income interface as income is now part of DBTransaction\n// The income-specific fields (like sourceName) are now part of the `description` and `category` in DBTransaction for income types.\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/toast.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AAPA;;;;;;;AASA,MAAM,gBAAgB,iKAAA,CAAA,WAAwB;AAE9C,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,WAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qIACA;QAED,GAAG,KAAK;;;;;;AAGb,cAAc,WAAW,GAAG,iKAAA,CAAA,WAAwB,CAAC,WAAW;AAEhE,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6lBACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE;IACnC,qBACE,8OAAC,iKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;AACA,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAoB,CAAC,WAAW;AAEpD,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,SAAsB;QACrB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sgBACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,iKAAA,CAAA,SAAsB,CAAC,WAAW;AAE5D,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,yVACA;QAEF,eAAY;QACX,GAAG,KAAK;kBAET,cAAA,8OAAC,4LAAA,CAAA,IAAC;YAAC,WAAU;;;;;;;;;;;AAGjB,WAAW,WAAW,GAAG,iKAAA,CAAA,QAAqB,CAAC,WAAW;AAE1D,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,yBAAyB;QACtC,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG,iKAAA,CAAA,QAAqB,CAAC,WAAW;AAE1D,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,cAA2B;QAC1B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sBAAsB;QACnC,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG,iKAAA,CAAA,cAA2B,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 632, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/toaster.tsx"],"sourcesContent":["\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;;AAYO,SAAS;IACd,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IAE1B,qBACE,8OAAC,iIAAA,CAAA,gBAAa;;YACX,OAAO,GAAG,CAAC,SAAU,EAAE,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,OAAO;gBAChE,qBACE,8OAAC,iIAAA,CAAA,QAAK;oBAAW,GAAG,KAAK;;sCACvB,8OAAC;4BAAI,WAAU;;gCACZ,uBAAS,8OAAC,iIAAA,CAAA,aAAU;8CAAE;;;;;;gCACtB,6BACC,8OAAC,iIAAA,CAAA,mBAAgB;8CAAE;;;;;;;;;;;;wBAGtB;sCACD,8OAAC,iIAAA,CAAA,aAAU;;;;;;mBARD;;;;;YAWhB;0BACA,8OAAC,iIAAA,CAAA,gBAAa;;;;;;;;;;;AAGpB","debugId":null}}]
}