{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/dashboard/import/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Loader2, FileText, AlertTriangle, UploadCloud, Wand2, Eye } from 'lucide-react'; // Added Eye\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useRouter } from 'next/navigation';\nimport { ArrowLeft } from 'lucide-react';\nimport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n} from \"@/components/ui/table\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\n\n// Define the ParsedTransaction interface\ninterface ParsedTransaction {\n  rawDate?: string;\n  rawTime?: string;\n  parsedFullDate?: string; // Formatted date string for display\n  transactionDetailsRaw?: string[]; // All lines making up the \"Transaction Details\" column for this entry\n  transactionParty?: string; // Extracted \"Paid to / Received from ...\"\n  transactionId?: string;    // Extracted \"Transaction ID ...\"\n  utrNo?: string;            // Extracted \"UTR No ...\"\n  paidBy?: string;           // Extracted \"Paid by ...\"\n  type?: 'CREDIT' | 'DEBIT' | 'UNKNOWN';\n  amount?: number;\n  currency?: string;\n}\n\nexport default function ImportTransactionsPage() {\n  const [file, setFile] = useState<File | null>(null);\n  const [extractedText, setExtractedText] = useState<string>(\"\");\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const [parsedTransactions, setParsedTransactions] = useState<ParsedTransaction[]>([]);\n  const [isParsing, setIsParsing] = useState<boolean>(false);\n\n  useEffect(() => {\n    // Ensure this runs only on the client\n    if (typeof window !== 'undefined') {\n      try {\n        const workerUrl = new URL('/pdf.worker.js', window.location.origin);\n        console.log('Setting PDF worker URL to:', workerUrl.href);\n        pdfjsLib.GlobalWorkerOptions.workerSrc = workerUrl.href;\n      } catch (e) {\n        console.error(\"Error constructing PDF worker URL:\", e);\n        // Fallback for environments where new URL() might fail with relative paths or specific origins\n        // This is unlikely to be the primary issue but provides a fallback.\n        const fallbackWorkerPath = '/pdf.worker.js';\n        console.log('Falling back to PDF worker path:', fallbackWorkerPath);\n        pdfjsLib.GlobalWorkerOptions.workerSrc = fallbackWorkerPath;\n      }\n    }\n  }, []);\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (selectedFile) {\n      if (selectedFile.type === \"application/pdf\") {\n        setFile(selectedFile);\n        setError(null);\n        setExtractedText(\"\"); \n        setParsedTransactions([]); // Clear previous parsed data\n      } else {\n        setError(\"Invalid file type. Please upload a PDF file.\");\n        setFile(null);\n        setParsedTransactions([]);\n        toast({\n          title: \"Invalid File Type\",\n          description: \"Please upload a PDF file.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handleExtractText = useCallback(async () => {\n    if (!file) {\n      setError(\"Please select a PDF file first.\");\n      toast({\n        title: \"No File Selected\",\n        description: \"Please select a PDF file to extract text.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setExtractedText(\"\");\n    setParsedTransactions([]);\n\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n      const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n      let fullText = \"\";\n\n      for (let i = 1; i <= pdf.numPages; i++) {\n        const page = await pdf.getPage(i);\n        const textContent = await page.getTextContent();\n        const pageText = textContent.items.map((item: any) => item.str).join(\"\\n\"); // Join with newline to preserve line breaks better\n        fullText += pageText + \"\\n\\n\"; \n      }\n      \n      setExtractedText(fullText.trim());\n      if (fullText.trim().length === 0) {\n        toast({\n            title: \"No Text Found\",\n            description: \"The PDF might be image-based or password-protected without text content.\",\n            variant: \"default\"\n        });\n      } else {\n        toast({\n            title: \"Text Extracted Successfully\",\n            description: \"Review the text below. You can now try to parse it or process it with AI.\",\n        });\n      }\n    } catch (err: any) {\n      console.error(\"Error extracting PDF text:\", err);\n      setError(`Failed to process PDF: ${err.message || 'Unknown error'}. The PDF might be corrupted or password-protected.`);\n      toast({\n        title: \"PDF Processing Error\",\n        description: `Failed to process PDF: ${err.message || 'Unknown error'}.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [file, toast]);\n\n  // Main Parsing Logic Function\n  const parseBankStatementText = (text: string): ParsedTransaction[] => {\n    const lines = text.split('\\n').map(line => line.trim()); // Keep empty lines initially for block structure\n    const parsedTxs: ParsedTransaction[] = [];\n\n    const dateRegex = /\\b((?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s+\\d{1,2},\\s+\\d{4})\\b/i;\n    const timeRegex = /(\\d{1,2}:\\d{2}\\s+(?:AM|PM))/i;\n    const partyRegex = /(?:Paid to|Received from)\\s*[:\\-\\s]*(.+)/i;\n    const transIdRegex = /Transaction ID\\s*[:\\-\\s]*(\\S+)/i;\n    const utrRegex = /UTR No\\s*[:\\-\\s]*(\\S+)/i;\n    const paidByRegex = /Paid by\\s*[:\\-\\s]*(.+)/i;\n    const typeRegex = /\\b(CREDIT|DEBIT)\\b/i;\n    const amountRegex = /(₹)\\s*([\\d,]+\\.?\\d*)/;\n\n    let currentTransactionBlock: string[] = [];\n    let processingTransaction = false;\n\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n\n        // Check if the line contains a date - potential start of a transaction row\n        if (dateRegex.test(line)) {\n            // If we were processing a transaction, finalize it\n            if (processingTransaction && currentTransactionBlock.length > 0) {\n                const parsed = processTransactionBlock(currentTransactionBlock, dateRegex, timeRegex, partyRegex, transIdRegex, utrRegex, paidByRegex, typeRegex, amountRegex);\n                if (parsed.rawDate) parsedTxs.push(parsed); // Add if valid\n            }\n            currentTransactionBlock = [line]; // Start new block with the date line\n            processingTransaction = true;\n        } else if (processingTransaction) {\n            // If it's not a new date, and we are in a transaction, add line to current block\n            currentTransactionBlock.push(line);\n\n            // Heuristic: If we see DEBIT/CREDIT and an Amount on the same or subsequent lines,\n            // it's a strong indicator this block might be ending soon or is a complete row.\n            // This part is tricky because \"Transaction Details\" is multi-line.\n            // For now, we collect lines until the next date.\n        }\n    }\n    // Process the last transaction block\n    if (processingTransaction && currentTransactionBlock.length > 0) {\n        const parsed = processTransactionBlock(currentTransactionBlock, dateRegex, timeRegex, partyRegex, transIdRegex, utrRegex, paidByRegex, typeRegex, amountRegex);\n        if (parsed.rawDate) parsedTxs.push(parsed);\n    }\n    \n    return parsedTxs;\n  };\n\n  const processTransactionBlock = (\n        blockLines: string[],\n        dateRegex: RegExp, timeRegex: RegExp, partyRegex: RegExp, transIdRegex: RegExp, \n        utrRegex: RegExp, paidByRegex: RegExp, typeRegex: RegExp, amountRegex: RegExp\n    ): ParsedTransaction => {\n        \n    let transaction: ParsedTransaction = { transactionDetailsRaw: [], type: 'UNKNOWN' };\n    let detailsCollector: string[] = [];\n\n    for (let j = 0; j < blockLines.length; j++) {\n        const lineContent = blockLines[j];\n        if (!lineContent && j > 0 && j < blockLines.length -1) { // Preserve internal empty lines for context\n            detailsCollector.push(\"\"); \n            continue;\n        }\n        if (!lineContent) continue; // Skip empty lines at start/end of block\n\n        // Date\n        const dateMatch = lineContent.match(dateRegex);\n        if (dateMatch && !transaction.rawDate) {\n            transaction.rawDate = dateMatch[0];\n            // Check next line for time if this is the date line\n            if (j + 1 < blockLines.length) {\n                const timeMatch = blockLines[j+1].match(timeRegex);\n                if (timeMatch) {\n                    transaction.rawTime = timeMatch[0];\n                    j++; // Consume time line\n                }\n            }\n            continue; // Move to next line after processing date (and possibly time)\n        }\n        \n        // Try to match other fields\n        const partyM = lineContent.match(partyRegex);\n        if (partyM) { transaction.transactionParty = partyM[1].trim(); detailsCollector.push(lineContent); continue; }\n\n        const transIdM = lineContent.match(transIdRegex);\n        if (transIdM) { transaction.transactionId = transIdM[1].trim(); detailsCollector.push(lineContent); continue; }\n        \n        const utrM = lineContent.match(utrRegex);\n        if (utrM) { transaction.utrNo = utrM[1].trim(); detailsCollector.push(lineContent); continue; }\n\n        const paidByM = lineContent.match(paidByRegex);\n        if (paidByM) { transaction.paidBy = paidByM[1].trim(); detailsCollector.push(lineContent); continue; }\n\n        const typeM = lineContent.match(typeRegex);\n        if (typeM) { transaction.type = typeM[0].toUpperCase() as 'CREDIT' | 'DEBIT'; } // Don't continue, might be on same line as amount\n\n        const amountM = lineContent.match(amountRegex);\n        if (amountM) {\n            transaction.currency = amountM[1];\n            transaction.amount = parseFloat(amountM[2].replace(/,/g, ''));\n        }\n        \n        // If not a structural element recognized above, add to detailsCollector unless it was already added.\n        if (!partyM && !transIdM && !utrM && !paidByM) {\n          // Avoid re-adding line if it contained type/amount but was not one of the primary detail lines\n          let wasTypeOrAmountLine = false;\n          if (typeM || amountM) wasTypeOrAmountLine = true;\n          \n          if (!wasTypeOrAmountLine || (typeM && !amountM) || (!typeM && amountM)){ // Add if it's purely detail or only one of type/amount\n             detailsCollector.push(lineContent);\n          } else if (!typeM && !amountM) { // only if it's not type AND not amount line\n             detailsCollector.push(lineContent);\n          }\n        }\n    }\n\n    transaction.transactionDetailsRaw = detailsCollector;\n\n    if (transaction.rawDate && transaction.rawTime) {\n        try {\n            const d = new Date(`${transaction.rawDate} ${transaction.rawTime}`);\n            transaction.parsedFullDate = d.toLocaleString('en-IN', { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: '2-digit', hour12: true });\n        } catch (e) { \n            transaction.parsedFullDate = `${transaction.rawDate} ${transaction.rawTime}`;\n        }\n    } else if (transaction.rawDate) {\n        try {\n            const d = new Date(transaction.rawDate);\n            transaction.parsedFullDate = d.toLocaleDateString('en-IN', { year: 'numeric', month: 'short', day: 'numeric' });\n        } catch(e) {\n            transaction.parsedFullDate = transaction.rawDate;\n        }\n    }\n    return transaction;\n  };\n\n\n  const handleParseExtractedText = () => {\n    if (!extractedText) {\n      toast({\n        title: \"No Text to Parse\",\n        description: \"Please extract text from a PDF first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setIsParsing(true);\n    setParsedTransactions([]);\n\n    // Simulate parsing delay for UX\n    setTimeout(() => {\n      const parsed = parseBankStatementText(extractedText);\n      setParsedTransactions(parsed);\n      setIsParsing(false);\n      if (parsed.length > 0) {\n        toast({\n          title: \"Parsing Attempt Complete\",\n          description: `Found ${parsed.length} potential transaction entries. Please review the table.`,\n        });\n      } else {\n        toast({\n          title: \"No Transactions Identified\",\n          description: \"Could not identify distinct transaction entries based on the expected date pattern. The PDF structure might be different or text extraction quality is low.\",\n          variant: \"default\",\n          duration: 7000,\n        });\n      }\n    }, 500);\n  };\n\n  const handleProcessWithAI = () => {\n    if (parsedTransactions.length === 0 && !extractedText) {\n        toast({\n            title: \"No Data to Process\",\n            description: \"Please extract text from a PDF and optionally parse it first.\",\n            variant: \"destructive\"\n        });\n        return;\n    }\n     const dataToSendToAI = parsedTransactions.length > 0 \n        ? JSON.stringify(parsedTransactions, null, 2) // Send structured if available\n        : extractedText; // Send raw text otherwise\n\n    toast({\n      title: \"AI Processing (Placeholder)\",\n      description: \"This is where you would send the data to a Genkit flow for structuring and importing.\",\n    });\n    console.log(\"Data for AI Processing:\", dataToSendToAI);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-secondary/30 to-background p-4 sm:p-6 md:p-8\">\n      <header className=\"mb-8\">\n        <Button onClick={() => router.push('/dashboard')} variant=\"outline\" size=\"sm\" className=\"mb-4 hover:bg-muted/50\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back to Dashboard\n        </Button>\n        <div className=\"bg-card p-6 rounded-xl shadow-xl border border-border/50\">\n          <h1 className=\"text-3xl sm:text-4xl font-bold text-primary mb-1 flex items-center\">\n            <UploadCloud className=\"mr-3 h-8 w-8\" /> Import Transactions from PDF\n          </h1>\n          <p className=\"text-muted-foreground text-lg\">\n            Upload your bank statement (PDF) to extract transaction data.\n          </p>\n        </div>\n      </header>\n\n      <Card className=\"shadow-xl border border-border/50\">\n        <CardHeader>\n          <CardTitle>Step 1: Upload PDF Statement</CardTitle>\n          <CardDescription>\n            Select a PDF file. Text extraction works best with text-based PDFs. Scanned images won't work.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"pdf-upload\" className=\"text-base font-medium\">Choose PDF File</Label>\n            <Input \n              id=\"pdf-upload\" \n              type=\"file\" \n              accept=\".pdf\" \n              onChange={handleFileChange} \n              className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary/10 file:text-primary hover:file:bg-primary/20\"\n            />\n            {error && (\n              <p className=\"text-sm text-destructive flex items-center mt-2\">\n                <AlertTriangle className=\"h-4 w-4 mr-1\" /> {error}\n              </p>\n            )}\n          </div>\n\n          <Button \n            onClick={handleExtractText} \n            disabled={isLoading || !file}\n            className=\"w-full sm:w-auto bg-primary hover:bg-primary/90 text-primary-foreground\"\n          >\n            {isLoading ? (\n              <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Extracting...</>\n            ) : (\n              <><FileText className=\"mr-2 h-4 w-4\" /> Extract Text from PDF</>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {extractedText && (\n        <Card className=\"mt-8 shadow-xl border border-border/50\">\n          <CardHeader>\n            <CardTitle>Step 2: Review & Parse Extracted Text</CardTitle>\n            <CardDescription>\n              Below is the raw text from your PDF. You can manually parse it or use the \"Parse Extracted Text\" button for an automated attempt based on common bank statement structures.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Textarea\n              value={extractedText}\n              readOnly\n              placeholder=\"Extracted text will appear here...\"\n              className=\"min-h-[200px] max-h-[40vh] text-xs bg-muted/30 font-mono\"\n              aria-label=\"Extracted text from PDF\"\n            />\n          </CardContent>\n          <CardFooter className=\"flex flex-col sm:flex-row gap-4 justify-start\">\n            <Button \n              onClick={handleParseExtractedText} \n              disabled={isParsing || !extractedText}\n              variant=\"outline\"\n              className=\"w-full sm:w-auto\"\n            >\n              {isParsing ? (\n                <><Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Parsing...</>\n              ) : (\n                <><Eye className=\"mr-2 h-4 w-4\" /> Parse Extracted Text (Preview)</>\n              )}\n            </Button>\n            <Button \n              onClick={handleProcessWithAI} \n              disabled={isLoading || isParsing} \n              className=\"w-full sm:w-auto bg-accent hover:bg-accent/90 text-accent-foreground\"\n            >\n              <Wand2 className=\"mr-2 h-4 w-4\" /> Process with AI (Placeholder)\n            </Button>\n          </CardFooter>\n        </Card>\n      )}\n\n      {parsedTransactions.length > 0 && (\n        <Card className=\"mt-8 shadow-xl border border-border/50\">\n          <CardHeader>\n            <CardTitle>Step 3: Parsed Transaction Preview</CardTitle>\n            <CardDescription>Review the extracted transactions. Accuracy depends on PDF structure and text extraction quality. This is for verification only.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ScrollArea className=\"h-[400px] w-full rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-[150px]\">Date & Time</TableHead>\n                    <TableHead>Transaction Party</TableHead>\n                    <TableHead>Transaction ID</TableHead>\n                    <TableHead>UTR No.</TableHead>\n                    <TableHead>Paid By</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead className=\"text-right\">Amount</TableHead>\n                    <TableHead>Raw Details Lines</TableHead> \n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {parsedTransactions.map((txn, index) => (\n                    <TableRow key={index}>\n                      <TableCell className=\"text-xs whitespace-nowrap\">{txn.parsedFullDate || txn.rawDate || 'N/A'}</TableCell>\n                      <TableCell className=\"max-w-[180px] truncate text-xs\" title={txn.transactionParty}>{txn.transactionParty || '-'}</TableCell>\n                      <TableCell className=\"text-xs\">{txn.transactionId || '-'}</TableCell>\n                      <TableCell className=\"text-xs\">{txn.utrNo || '-'}</TableCell>\n                      <TableCell className=\"max-w-[150px] truncate text-xs\" title={txn.paidBy}>{txn.paidBy || '-'}</TableCell>\n                      <TableCell className={cn(\"text-xs font-medium\", txn.type === 'CREDIT' ? 'text-green-600' : txn.type === 'DEBIT' ? 'text-red-600' : '')}>\n                        {txn.type || 'N/A'}\n                      </TableCell>\n                      <TableCell className=\"text-right text-xs font-semibold\">{txn.currency}{txn.amount?.toFixed(2) || '-'}</TableCell>\n                       <TableCell className=\"text-[10px] text-muted-foreground max-w-[200px] truncate\" title={txn.transactionDetailsRaw?.join('\\n') || ''}>\n                        {txn.transactionDetailsRaw?.slice(0,3).join('; ') || '-'}\n                        {(txn.transactionDetailsRaw?.length || 0) > 3 ? '...' : ''}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}